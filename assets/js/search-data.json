{
  
    
        "post0": {
            "title": "Segformer Inference Huggingface",
            "content": "from transformers import SegformerFeatureExtractor, SegformerForSemanticSegmentation import torch model_name = &quot;nvidia/segformer-b5-finetuned-ade-640-640&quot; feature_extractor = SegformerFeatureExtractor.from_pretrained(model_name) model = SegformerForSemanticSegmentation.from_pretrained(model_name) . Downloading: 100%|██████████| 271/271 [00:00&lt;00:00, 272kB/s] Downloading: 100%|██████████| 6.72k/6.72k [00:00&lt;00:00, 2.00MB/s] Downloading: 100%|██████████| 324M/324M [00:29&lt;00:00, 11.6MB/s] . from datasets import load_dataset from PIL import Image ds = load_dataset(&quot;hf-internal-testing/fixtures_ade20k&quot;, split=&quot;test&quot;) image = Image.open(ds[0][&quot;file&quot;]) segmentation_map = Image.open(ds[1][&quot;file&quot;]) image . Downloading builder script: 100%|██████████| 2.79k/2.79k [00:00&lt;00:00, 660kB/s] No config specified, defaulting to: fixtures_ade20k/image . Downloading and preparing dataset fixtures_ade20k/image to /home/aswin/.cache/huggingface/datasets/hf-internal-testing___fixtures_ade20k/image/1.9.0/dbb69c3ff2da9a2dcc2de41e8d7ab6543402914292e3d29a4f9701bef817e7db... . Downloading data: 100%|██████████| 52.6k/52.6k [00:00&lt;00:00, 233kB/s] Downloading data: 100%|██████████| 3.89k/3.89k [00:00&lt;00:00, 1.51MB/s] Downloading data: 100%|██████████| 33.9k/33.9k [00:00&lt;00:00, 318kB/s] Downloading data: 100%|██████████| 3.72k/3.72k [00:00&lt;00:00, 894kB/s] Downloading data files: 100%|██████████| 4/4 [00:04&lt;00:00, 1.10s/it] Extracting data files: 100%|██████████| 4/4 [00:00&lt;00:00, 379.61it/s] . Dataset fixtures_ade20k downloaded and prepared to /home/aswin/.cache/huggingface/datasets/hf-internal-testing___fixtures_ade20k/image/1.9.0/dbb69c3ff2da9a2dcc2de41e8d7ab6543402914292e3d29a4f9701bef817e7db. Subsequent calls will reuse this data. . pixel_values = feature_extractor(image, return_tensors=&quot;pt&quot;).pixel_values . outputs = model(pixel_values) logits = outputs.logits . def ade_palette(): &quot;&quot;&quot;ADE20K palette that maps each class to RGB values.&quot;&quot;&quot; return [[120, 120, 120], [180, 120, 120], [6, 230, 230], [80, 50, 50], [4, 200, 3], [120, 120, 80], [140, 140, 140], [204, 5, 255], [230, 230, 230], [4, 250, 7], [224, 5, 255], [235, 255, 7], [150, 5, 61], [120, 120, 70], [8, 255, 51], [255, 6, 82], [143, 255, 140], [204, 255, 4], [255, 51, 7], [204, 70, 3], [0, 102, 200], [61, 230, 250], [255, 6, 51], [11, 102, 255], [255, 7, 71], [255, 9, 224], [9, 7, 230], [220, 220, 220], [255, 9, 92], [112, 9, 255], [8, 255, 214], [7, 255, 224], [255, 184, 6], [10, 255, 71], [255, 41, 10], [7, 255, 255], [224, 255, 8], [102, 8, 255], [255, 61, 6], [255, 194, 7], [255, 122, 8], [0, 255, 20], [255, 8, 41], [255, 5, 153], [6, 51, 255], [235, 12, 255], [160, 150, 20], [0, 163, 255], [140, 140, 140], [250, 10, 15], [20, 255, 0], [31, 255, 0], [255, 31, 0], [255, 224, 0], [153, 255, 0], [0, 0, 255], [255, 71, 0], [0, 235, 255], [0, 173, 255], [31, 0, 255], [11, 200, 200], [255, 82, 0], [0, 255, 245], [0, 61, 255], [0, 255, 112], [0, 255, 133], [255, 0, 0], [255, 163, 0], [255, 102, 0], [194, 255, 0], [0, 143, 255], [51, 255, 0], [0, 82, 255], [0, 255, 41], [0, 255, 173], [10, 0, 255], [173, 255, 0], [0, 255, 153], [255, 92, 0], [255, 0, 255], [255, 0, 245], [255, 0, 102], [255, 173, 0], [255, 0, 20], [255, 184, 184], [0, 31, 255], [0, 255, 61], [0, 71, 255], [255, 0, 204], [0, 255, 194], [0, 255, 82], [0, 10, 255], [0, 112, 255], [51, 0, 255], [0, 194, 255], [0, 122, 255], [0, 255, 163], [255, 153, 0], [0, 255, 10], [255, 112, 0], [143, 255, 0], [82, 0, 255], [163, 255, 0], [255, 235, 0], [8, 184, 170], [133, 0, 255], [0, 255, 92], [184, 0, 255], [255, 0, 31], [0, 184, 255], [0, 214, 255], [255, 0, 112], [92, 255, 0], [0, 224, 255], [112, 224, 255], [70, 184, 160], [163, 0, 255], [153, 0, 255], [71, 255, 0], [255, 0, 163], [255, 204, 0], [255, 0, 143], [0, 255, 235], [133, 255, 0], [255, 0, 235], [245, 0, 255], [255, 0, 122], [255, 245, 0], [10, 190, 212], [214, 255, 0], [0, 204, 255], [20, 0, 255], [255, 255, 0], [0, 153, 255], [0, 41, 255], [0, 255, 204], [41, 0, 255], [41, 255, 0], [173, 0, 255], [0, 245, 255], [71, 0, 255], [122, 0, 255], [0, 255, 184], [0, 92, 255], [184, 255, 0], [0, 133, 255], [255, 214, 0], [25, 194, 194], [102, 255, 0], [92, 0, 255]] . from torch import nn import numpy as np import matplotlib.pyplot as plt logits = nn.functional.interpolate(outputs.logits.detach().cpu(), size=image.size[::-1], # (height, width) mode=&#39;bilinear&#39;, align_corners=False) seg = logits.argmax(dim=1)[0] color_seg = np.zeros((seg.shape[0], seg.shape[1], 3), dtype=np.uint8) palette = np.array(ade_palette()) for label, color in enumerate(palette): color_seg[seg == label, :] = color color_sef = color_seg[..., ::-1] img = np.array(image) * 0.5 + color_seg * 0.5 img = img.astype(np.uint8) plt.figure(figsize=(10, 10)) plt.imshow(img) plt.show() . ground_truth_seg = np.array(segmentation_map) ground_truth_color_seg = np.zeros((ground_truth_seg.shape[0], ground_truth_seg.shape[1], 3), dtype=np.uint8) for label, color in enumerate(palette): ground_truth_color_seg[ground_truth_seg - 1 == label, :] = color ground_truth_color_sef = ground_truth_color_seg[..., ::-1] img = np.array(image) * 0.5 + ground_truth_color_sef * 0.5 img = img.astype(np.uint8) plt.figure(figsize=(10, 10)) plt.imshow(img) plt.show() .",
            "url": "https://masapasa.github.io/nubri/jupyter/2022/05/10/Segformer.html",
            "relUrl": "/jupyter/2022/05/10/Segformer.html",
            "date": " • May 10, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Heart Disease",
            "content": "import pandas as pd import numpy as np data = pd.read_csv(&#39;/home/aswin/data/heart/heart_disease_health_indicators_BRFSS2015.csv&#39;) data.head() . HeartDiseaseorAttack HighBP HighChol CholCheck BMI Smoker Stroke Diabetes PhysActivity Fruits ... AnyHealthcare NoDocbcCost GenHlth MentHlth PhysHlth DiffWalk Sex Age Education Income . 0 0.0 | 1.0 | 1.0 | 1.0 | 40.0 | 1.0 | 0.0 | 0.0 | 0.0 | 0.0 | ... | 1.0 | 0.0 | 5.0 | 18.0 | 15.0 | 1.0 | 0.0 | 9.0 | 4.0 | 3.0 | . 1 0.0 | 0.0 | 0.0 | 0.0 | 25.0 | 1.0 | 0.0 | 0.0 | 1.0 | 0.0 | ... | 0.0 | 1.0 | 3.0 | 0.0 | 0.0 | 0.0 | 0.0 | 7.0 | 6.0 | 1.0 | . 2 0.0 | 1.0 | 1.0 | 1.0 | 28.0 | 0.0 | 0.0 | 0.0 | 0.0 | 1.0 | ... | 1.0 | 1.0 | 5.0 | 30.0 | 30.0 | 1.0 | 0.0 | 9.0 | 4.0 | 8.0 | . 3 0.0 | 1.0 | 0.0 | 1.0 | 27.0 | 0.0 | 0.0 | 0.0 | 1.0 | 1.0 | ... | 1.0 | 0.0 | 2.0 | 0.0 | 0.0 | 0.0 | 0.0 | 11.0 | 3.0 | 6.0 | . 4 0.0 | 1.0 | 1.0 | 1.0 | 24.0 | 0.0 | 0.0 | 0.0 | 1.0 | 1.0 | ... | 1.0 | 0.0 | 2.0 | 3.0 | 0.0 | 0.0 | 0.0 | 11.0 | 5.0 | 4.0 | . 5 rows × 22 columns . x = data.iloc[:, 1:].values y = data[&quot;HeartDiseaseorAttack&quot;] x y . 0 0.0 1 0.0 2 0.0 3 0.0 4 0.0 ... 253675 0.0 253676 0.0 253677 0.0 253678 0.0 253679 1.0 Name: HeartDiseaseorAttack, Length: 253680, dtype: float64 . nomi_col=[2,6,10] ordi_col=[1,8] num_col=[0,3,4,5,7,9] . from sklearn.preprocessing import OneHotEncoder, OrdinalEncoder, StandardScaler from sklearn.compose import make_column_transformer from sklearn import set_config trans = make_column_transformer((OneHotEncoder(sparse=False),nomi_col),(OrdinalEncoder(),ordi_col),(StandardScaler(),num_col),remainder=&quot;passthrough&quot;) set_config(display=&quot;diagram&quot;) trans . ColumnTransformer(remainder=&amp;#x27;passthrough&amp;#x27;, transformers=[(&amp;#x27;onehotencoder&amp;#x27;, OneHotEncoder(sparse=False), [2, 6, 10]), (&amp;#x27;ordinalencoder&amp;#x27;, OrdinalEncoder(), [1, 8]), (&amp;#x27;standardscaler&amp;#x27;, StandardScaler(), [0, 3, 4, 5, 7, 9])]) . Please rerun this cell to show the HTML repr or trust the notebook.ColumnTransformerColumnTransformer(remainder=&amp;#x27;passthrough&amp;#x27;, transformers=[(&amp;#x27;onehotencoder&amp;#x27;, OneHotEncoder(sparse=False), [2, 6, 10]), (&amp;#x27;ordinalencoder&amp;#x27;, OrdinalEncoder(), [1, 8]), (&amp;#x27;standardscaler&amp;#x27;, StandardScaler(), [0, 3, 4, 5, 7, 9])]) . onehotencoder[2, 6, 10] . OneHotEncoderOneHotEncoder(sparse=False) . ordinalencoder[1, 8] . OrdinalEncoderOrdinalEncoder() . standardscaler[0, 3, 4, 5, 7, 9] . StandardScalerStandardScaler() . remainder . passthroughpassthrough . from sklearn.model_selection import train_test_split x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=.2) . from sklearn.neighbors import KNeighborsClassifier from sklearn.pipeline import make_pipeline Model = KNeighborsClassifier(11) pipe = make_pipeline(trans,Model) Model . KNeighborsClassifier(n_neighbors=11) . Please rerun this cell to show the HTML repr or trust the notebook.KNeighborsClassifierKNeighborsClassifier(n_neighbors=11) . pipe.fit(x_train,y_train) . Pipeline(steps=[(&amp;#x27;columntransformer&amp;#x27;, ColumnTransformer(remainder=&amp;#x27;passthrough&amp;#x27;, transformers=[(&amp;#x27;onehotencoder&amp;#x27;, OneHotEncoder(sparse=False), [2, 6, 10]), (&amp;#x27;ordinalencoder&amp;#x27;, OrdinalEncoder(), [1, 8]), (&amp;#x27;standardscaler&amp;#x27;, StandardScaler(), [0, 3, 4, 5, 7, 9])])), (&amp;#x27;kneighborsclassifier&amp;#x27;, KNeighborsClassifier(n_neighbors=11))]) . Please rerun this cell to show the HTML repr or trust the notebook.PipelinePipeline(steps=[(&amp;#x27;columntransformer&amp;#x27;, ColumnTransformer(remainder=&amp;#x27;passthrough&amp;#x27;, transformers=[(&amp;#x27;onehotencoder&amp;#x27;, OneHotEncoder(sparse=False), [2, 6, 10]), (&amp;#x27;ordinalencoder&amp;#x27;, OrdinalEncoder(), [1, 8]), (&amp;#x27;standardscaler&amp;#x27;, StandardScaler(), [0, 3, 4, 5, 7, 9])])), (&amp;#x27;kneighborsclassifier&amp;#x27;, KNeighborsClassifier(n_neighbors=11))]) . columntransformer: ColumnTransformerColumnTransformer(remainder=&amp;#x27;passthrough&amp;#x27;, transformers=[(&amp;#x27;onehotencoder&amp;#x27;, OneHotEncoder(sparse=False), [2, 6, 10]), (&amp;#x27;ordinalencoder&amp;#x27;, OrdinalEncoder(), [1, 8]), (&amp;#x27;standardscaler&amp;#x27;, StandardScaler(), [0, 3, 4, 5, 7, 9])]) . onehotencoder[2, 6, 10] . OneHotEncoderOneHotEncoder(sparse=False) . ordinalencoder[1, 8] . OrdinalEncoderOrdinalEncoder() . standardscaler[0, 3, 4, 5, 7, 9] . StandardScalerStandardScaler() . remainder[11, 12, 13, 14, 15, 16, 17, 18, 19, 20] . passthroughpassthrough . KNeighborsClassifierKNeighborsClassifier(n_neighbors=11) . pred = pipe.predict(x_test) . from sklearn.metrics import accuracy_score accuracy_score(pred,y_test) . 0.9054714601072217 . from sklearn.linear_model import Perceptron x2=data.loc[:,[&quot;HighBP&quot;, &quot;Age&quot;]] y2=np.int_(data.HeartDiseaseorAttack) prc=Perceptron(class_weight=&quot;balanced&quot;) prc.fit(x2,y2) . Perceptron(class_weight=&amp;#x27;balanced&amp;#x27;) . Please rerun this cell to show the HTML repr or trust the notebook.PerceptronPerceptron(class_weight=&amp;#x27;balanced&amp;#x27;) . from mlxtend.plotting import plot_decision_regions plot_decision_regions(x2.values,y2,clf=prc,legend=2) . /home/aswin/anaconda3/envs/jina/lib/python3.8/site-packages/sklearn/base.py:450: UserWarning: X does not have valid feature names, but Perceptron was fitted with feature names warnings.warn( . &lt;AxesSubplot:&gt; . from sklearn.linear_model import LogisticRegression model = LogisticRegression(solver=&quot;liblinear&quot;) pipe2=make_pipeline(trans,model) pipe2 . Pipeline(steps=[(&amp;#x27;columntransformer&amp;#x27;, ColumnTransformer(remainder=&amp;#x27;passthrough&amp;#x27;, transformers=[(&amp;#x27;onehotencoder&amp;#x27;, OneHotEncoder(sparse=False), [2, 6, 10]), (&amp;#x27;ordinalencoder&amp;#x27;, OrdinalEncoder(), [1, 8]), (&amp;#x27;standardscaler&amp;#x27;, StandardScaler(), [0, 3, 4, 5, 7, 9])])), (&amp;#x27;logisticregression&amp;#x27;, LogisticRegression(solver=&amp;#x27;liblinear&amp;#x27;))]) . Please rerun this cell to show the HTML repr or trust the notebook.PipelinePipeline(steps=[(&amp;#x27;columntransformer&amp;#x27;, ColumnTransformer(remainder=&amp;#x27;passthrough&amp;#x27;, transformers=[(&amp;#x27;onehotencoder&amp;#x27;, OneHotEncoder(sparse=False), [2, 6, 10]), (&amp;#x27;ordinalencoder&amp;#x27;, OrdinalEncoder(), [1, 8]), (&amp;#x27;standardscaler&amp;#x27;, StandardScaler(), [0, 3, 4, 5, 7, 9])])), (&amp;#x27;logisticregression&amp;#x27;, LogisticRegression(solver=&amp;#x27;liblinear&amp;#x27;))]) . columntransformer: ColumnTransformerColumnTransformer(remainder=&amp;#x27;passthrough&amp;#x27;, transformers=[(&amp;#x27;onehotencoder&amp;#x27;, OneHotEncoder(sparse=False), [2, 6, 10]), (&amp;#x27;ordinalencoder&amp;#x27;, OrdinalEncoder(), [1, 8]), (&amp;#x27;standardscaler&amp;#x27;, StandardScaler(), [0, 3, 4, 5, 7, 9])]) . onehotencoder[2, 6, 10] . OneHotEncoderOneHotEncoder(sparse=False) . ordinalencoder[1, 8] . OrdinalEncoderOrdinalEncoder() . standardscaler[0, 3, 4, 5, 7, 9] . StandardScalerStandardScaler() . remainder[11, 12, 13, 14, 15, 16, 17, 18, 19, 20] . passthroughpassthrough . LogisticRegressionLogisticRegression(solver=&amp;#x27;liblinear&amp;#x27;) . pipe2.fit(x_train,y_train) . Pipeline(steps=[(&amp;#x27;columntransformer&amp;#x27;, ColumnTransformer(remainder=&amp;#x27;passthrough&amp;#x27;, transformers=[(&amp;#x27;onehotencoder&amp;#x27;, OneHotEncoder(sparse=False), [2, 6, 10]), (&amp;#x27;ordinalencoder&amp;#x27;, OrdinalEncoder(), [1, 8]), (&amp;#x27;standardscaler&amp;#x27;, StandardScaler(), [0, 3, 4, 5, 7, 9])])), (&amp;#x27;logisticregression&amp;#x27;, LogisticRegression(solver=&amp;#x27;liblinear&amp;#x27;))]) . Please rerun this cell to show the HTML repr or trust the notebook.PipelinePipeline(steps=[(&amp;#x27;columntransformer&amp;#x27;, ColumnTransformer(remainder=&amp;#x27;passthrough&amp;#x27;, transformers=[(&amp;#x27;onehotencoder&amp;#x27;, OneHotEncoder(sparse=False), [2, 6, 10]), (&amp;#x27;ordinalencoder&amp;#x27;, OrdinalEncoder(), [1, 8]), (&amp;#x27;standardscaler&amp;#x27;, StandardScaler(), [0, 3, 4, 5, 7, 9])])), (&amp;#x27;logisticregression&amp;#x27;, LogisticRegression(solver=&amp;#x27;liblinear&amp;#x27;))]) . columntransformer: ColumnTransformerColumnTransformer(remainder=&amp;#x27;passthrough&amp;#x27;, transformers=[(&amp;#x27;onehotencoder&amp;#x27;, OneHotEncoder(sparse=False), [2, 6, 10]), (&amp;#x27;ordinalencoder&amp;#x27;, OrdinalEncoder(), [1, 8]), (&amp;#x27;standardscaler&amp;#x27;, StandardScaler(), [0, 3, 4, 5, 7, 9])]) . onehotencoder[2, 6, 10] . OneHotEncoderOneHotEncoder(sparse=False) . ordinalencoder[1, 8] . OrdinalEncoderOrdinalEncoder() . standardscaler[0, 3, 4, 5, 7, 9] . StandardScalerStandardScaler() . remainder[11, 12, 13, 14, 15, 16, 17, 18, 19, 20] . passthroughpassthrough . LogisticRegressionLogisticRegression(solver=&amp;#x27;liblinear&amp;#x27;) . pred2=pipe2.predict(x_test[:1111]) . accuracy_score(pred2,y_test[:1111]) . 0.9063906390639064 . from sklearn.svm import SVC alg=SVC() pipe3=make_pipeline(trans,alg) pipe3 . Pipeline(steps=[(&amp;#x27;columntransformer&amp;#x27;, ColumnTransformer(remainder=&amp;#x27;passthrough&amp;#x27;, transformers=[(&amp;#x27;onehotencoder&amp;#x27;, OneHotEncoder(sparse=False), [2, 6, 10]), (&amp;#x27;ordinalencoder&amp;#x27;, OrdinalEncoder(), [1, 8]), (&amp;#x27;standardscaler&amp;#x27;, StandardScaler(), [0, 3, 4, 5, 7, 9])])), (&amp;#x27;svc&amp;#x27;, SVC())]) . Please rerun this cell to show the HTML repr or trust the notebook.PipelinePipeline(steps=[(&amp;#x27;columntransformer&amp;#x27;, ColumnTransformer(remainder=&amp;#x27;passthrough&amp;#x27;, transformers=[(&amp;#x27;onehotencoder&amp;#x27;, OneHotEncoder(sparse=False), [2, 6, 10]), (&amp;#x27;ordinalencoder&amp;#x27;, OrdinalEncoder(), [1, 8]), (&amp;#x27;standardscaler&amp;#x27;, StandardScaler(), [0, 3, 4, 5, 7, 9])])), (&amp;#x27;svc&amp;#x27;, SVC())]) . columntransformer: ColumnTransformerColumnTransformer(remainder=&amp;#x27;passthrough&amp;#x27;, transformers=[(&amp;#x27;onehotencoder&amp;#x27;, OneHotEncoder(sparse=False), [2, 6, 10]), (&amp;#x27;ordinalencoder&amp;#x27;, OrdinalEncoder(), [1, 8]), (&amp;#x27;standardscaler&amp;#x27;, StandardScaler(), [0, 3, 4, 5, 7, 9])]) . onehotencoder[2, 6, 10] . OneHotEncoderOneHotEncoder(sparse=False) . ordinalencoder[1, 8] . OrdinalEncoderOrdinalEncoder() . standardscaler[0, 3, 4, 5, 7, 9] . StandardScalerStandardScaler() . remainder[11, 12, 13, 14, 15, 16, 17, 18, 19, 20] . passthroughpassthrough . SVCSVC() . pipe3.fit(x_train,y_train) . import seaborn as sns sns.countplot(y) . NameError Traceback (most recent call last) /home/aswin/Documents/nubri/_notebooks/2022-03-29-heart_disease.ipynb Cell 18&#39; in &lt;module&gt; &lt;a href=&#39;vscode-notebook-cell:/home/aswin/Documents/nubri/_notebooks/2022-03-29-heart_disease.ipynb#ch0000017?line=0&#39;&gt;1&lt;/a&gt; import seaborn as sns -&gt; &lt;a href=&#39;vscode-notebook-cell:/home/aswin/Documents/nubri/_notebooks/2022-03-29-heart_disease.ipynb#ch0000017?line=1&#39;&gt;2&lt;/a&gt; sns.countplot(y) NameError: name &#39;y&#39; is not defined .",
            "url": "https://masapasa.github.io/nubri/jupyter/2022/03/29/heart_disease.html",
            "relUrl": "/jupyter/2022/03/29/heart_disease.html",
            "date": " • Mar 29, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Bike share",
            "content": "import calendar from datetime import datetime import numpy as np import pandas as pd import seaborn as sns import matplotlib.pyplot as plt import missingno as msno . %matplotlib inline train = pd.read_csv(&#39;/home/aswin/data/bike-sharing-demand/train.csv&#39;) test = pd.read_csv(&#39;/home/aswin/data/bike-sharing-demand/test.csv&#39;) train.head() . datetime season holiday workingday weather temp atemp humidity windspeed casual registered count . 0 2011-01-01 00:00:00 | 1 | 0 | 0 | 1 | 9.84 | 14.395 | 81 | 0.0 | 3 | 13 | 16 | . 1 2011-01-01 01:00:00 | 1 | 0 | 0 | 1 | 9.02 | 13.635 | 80 | 0.0 | 8 | 32 | 40 | . 2 2011-01-01 02:00:00 | 1 | 0 | 0 | 1 | 9.02 | 13.635 | 80 | 0.0 | 5 | 27 | 32 | . 3 2011-01-01 03:00:00 | 1 | 0 | 0 | 1 | 9.84 | 14.395 | 75 | 0.0 | 3 | 10 | 13 | . 4 2011-01-01 04:00:00 | 1 | 0 | 0 | 1 | 9.84 | 14.395 | 75 | 0.0 | 0 | 1 | 1 | . train[&quot;tempDate&quot;] = train.datetime.apply(lambda x: datetime.strptime(x, &quot;%Y-%m-%d %H:%M:%S&quot;)) train[&quot;year&quot;] = train.tempDate.apply(lambda x: x.year) train[&quot;month&quot;] = train.tempDate.apply(lambda x: x.month) train[&quot;day&quot;] = train.tempDate.apply(lambda x: x.day) train[&quot;hour&quot;] = train.tempDate.apply(lambda x: x.hour) train[&quot;weekday&quot;] = train.tempDate.apply(lambda x: x.weekday()) train[&quot;weekend&quot;] = train.tempDate.apply(lambda x: 1 if x.weekday() in [5, 6] else 0) train.head() . datetime season holiday workingday weather temp atemp humidity windspeed casual registered count tempDate year month day hour weekday weekend . 0 2011-01-01 00:00:00 | 1 | 0 | 0 | 1 | 9.84 | 14.395 | 81 | 0.0 | 3 | 13 | 16 | 2011-01-01 00:00:00 | 2011 | 1 | 1 | 0 | 5 | 1 | . 1 2011-01-01 01:00:00 | 1 | 0 | 0 | 1 | 9.02 | 13.635 | 80 | 0.0 | 8 | 32 | 40 | 2011-01-01 01:00:00 | 2011 | 1 | 1 | 1 | 5 | 1 | . 2 2011-01-01 02:00:00 | 1 | 0 | 0 | 1 | 9.02 | 13.635 | 80 | 0.0 | 5 | 27 | 32 | 2011-01-01 02:00:00 | 2011 | 1 | 1 | 2 | 5 | 1 | . 3 2011-01-01 03:00:00 | 1 | 0 | 0 | 1 | 9.84 | 14.395 | 75 | 0.0 | 3 | 10 | 13 | 2011-01-01 03:00:00 | 2011 | 1 | 1 | 3 | 5 | 1 | . 4 2011-01-01 04:00:00 | 1 | 0 | 0 | 1 | 9.84 | 14.395 | 75 | 0.0 | 0 | 1 | 1 | 2011-01-01 04:00:00 | 2011 | 1 | 1 | 4 | 5 | 1 | . train.drop([&quot;tempDate&quot;], axis=1, inplace=True) train.drop([&quot;weekend&quot;], axis=1, inplace=True) train.head() . datetime season holiday workingday weather temp atemp humidity windspeed casual registered count year month day hour weekday . 0 2011-01-01 00:00:00 | 1 | 0 | 0 | 1 | 9.84 | 14.395 | 81 | 0.0 | 3 | 13 | 16 | 2011 | 1 | 1 | 0 | 5 | . 1 2011-01-01 01:00:00 | 1 | 0 | 0 | 1 | 9.02 | 13.635 | 80 | 0.0 | 8 | 32 | 40 | 2011 | 1 | 1 | 1 | 5 | . 2 2011-01-01 02:00:00 | 1 | 0 | 0 | 1 | 9.02 | 13.635 | 80 | 0.0 | 5 | 27 | 32 | 2011 | 1 | 1 | 2 | 5 | . 3 2011-01-01 03:00:00 | 1 | 0 | 0 | 1 | 9.84 | 14.395 | 75 | 0.0 | 3 | 10 | 13 | 2011 | 1 | 1 | 3 | 5 | . 4 2011-01-01 04:00:00 | 1 | 0 | 0 | 1 | 9.84 | 14.395 | 75 | 0.0 | 0 | 1 | 1 | 2011 | 1 | 1 | 4 | 5 | . fig = plt.figure(figsize=(12,6)) ax1 = fig.add_subplot(2,2,1) ax1 = sns.barplot(x=&quot;year&quot;, y=&quot;count&quot;, data=train.groupby(&quot;year&quot;)[&quot;count&quot;].mean().reset_index(), ax=ax1) . fig = plt.figure(figsize=(12,6)) ax2 = fig.add_subplot(2,2,2) ax2 = sns.barplot(x=&quot;month&quot;, y=&quot;count&quot;, data=train.groupby(&quot;month&quot;)[&quot;count&quot;].mean().reset_index(), ax=ax2) . fig = plt.figure(figsize=(12,6)) ax3 = fig.add_subplot(2,2,3) ax3 = sns.barplot(x=&quot;day&quot;, y=&quot;count&quot;, data=train.groupby(&quot;day&quot;)[&quot;count&quot;].mean().reset_index(), ax=ax3) . fig = plt.figure(figsize=(12,6)) ax4 = fig.add_subplot(2,2,4) ax4 = sns.barplot(x=&quot;hour&quot;, y=&quot;count&quot;, data=train.groupby(&quot;hour&quot;)[&quot;count&quot;].mean().reset_index(), ax=ax4) .",
            "url": "https://masapasa.github.io/nubri/jupyter/2022/03/29/bike_share.html",
            "relUrl": "/jupyter/2022/03/29/bike_share.html",
            "date": " • Mar 29, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Adverse Event",
            "content": "from datasets import Dataset, ClassLabel, Sequence, load_dataset, load_metric import numpy as np import pandas as pd from spacy import displacy import transformers from transformers import (AutoModelForTokenClassification, AutoTokenizer, DataCollatorForTokenClassification, pipeline, TrainingArguments, Trainer) . 2021-12-07 15:15:03.342950: I tensorflow/stream_executor/platform/default/dso_loader.cc:53] Successfully opened dynamic library libcudart.so.11.0 . cons_dataset = load_dataset(&quot;json&quot;, data_files=&quot;/home/aswin/Documents/hf_course_event_adr/ADR_XTRACTER/dataset.jsonl&quot;) . Using custom data configuration default-8accc35da3484983 . Downloading and preparing dataset json/default (download: Unknown size, generated: Unknown size, post-processed: Unknown size, total: Unknown size) to /home/aswin/.cache/huggingface/datasets/json/default-8accc35da3484983/0.0.0/83d5b3a2f62630efc6b5315f00f20209b4ad91a00ac586597caee3a4da0bef02... Dataset json downloaded and prepared to /home/aswin/.cache/huggingface/datasets/json/default-8accc35da3484983/0.0.0/83d5b3a2f62630efc6b5315f00f20209b4ad91a00ac586597caee3a4da0bef02. Subsequent calls will reuse this data. . . cons_dataset = cons_dataset[&quot;train&quot;].train_test_split() . cons_dataset . DatasetDict({ train: Dataset({ features: [&#39;text&#39;, &#39;drug&#39;, &#39;effect&#39;, &#39;drug_indices_start&#39;, &#39;drug_indices_end&#39;, &#39;effect_indices_start&#39;, &#39;effect_indices_end&#39;], num_rows: 3203 }) test: Dataset({ features: [&#39;text&#39;, &#39;drug&#39;, &#39;effect&#39;, &#39;drug_indices_start&#39;, &#39;drug_indices_end&#39;, &#39;effect_indices_start&#39;, &#39;effect_indices_end&#39;], num_rows: 1068 }) }) . label_list = [&#39;O&#39;, &#39;B-DRUG&#39;, &#39;I-DRUG&#39;, &#39;B-EFFECT&#39;, &#39;I-EFFECT&#39;] custom_seq = Sequence(feature=ClassLabel(num_classes=5, names=label_list, names_file=None, id=None), length=-1, id=None) cons_dataset[&quot;train&quot;].features[&quot;ner_tags&quot;] = custom_seq cons_dataset[&quot;test&quot;].features[&quot;ner_tags&quot;] = custom_seq . model_checkpoint = &quot;SpanBERT/spanbert-large-cased&quot; . tokenizer = AutoTokenizer.from_pretrained(model_checkpoint) . Downloading: 100%|██████████| 414/414 [00:00&lt;00:00, 139kB/s] Downloading: 100%|██████████| 208k/208k [00:00&lt;00:00, 488kB/s] . def generate_row_labels(row, verbose=False): &quot;&quot;&quot; Given a row from the consolidated `Ade_corpus_v2_drug_ade_relation` dataset, generates BIO tags for drug and effect entities. &quot;&quot;&quot; text = row[&quot;text&quot;] labels = [] label = &quot;O&quot; prefix = &quot;&quot; # while iterating through tokens, increment to traverse all drug and effect spans drug_index = 0 effect_index = 0 tokens = tokenizer(text, return_offsets_mapping=True) for n in range(len(tokens[&quot;input_ids&quot;])): offset_start, offset_end = tokens[&quot;offset_mapping&quot;][n] # should only happen for [CLS] and [SEP] if offset_end - offset_start == 0: labels.append(-100) continue if drug_index &lt; len(row[&quot;drug_indices_start&quot;]) and offset_start == row[&quot;drug_indices_start&quot;][drug_index]: label = &quot;DRUG&quot; prefix = &quot;B-&quot; elif effect_index &lt; len(row[&quot;effect_indices_start&quot;]) and offset_start == row[&quot;effect_indices_start&quot;][effect_index]: label = &quot;EFFECT&quot; prefix = &quot;B-&quot; labels.append(label_list.index(f&quot;{prefix}{label}&quot;)) if drug_index &lt; len(row[&quot;drug_indices_end&quot;]) and offset_end == row[&quot;drug_indices_end&quot;][drug_index]: label = &quot;O&quot; prefix = &quot;&quot; drug_index += 1 elif effect_index &lt; len(row[&quot;effect_indices_end&quot;]) and offset_end == row[&quot;effect_indices_end&quot;][effect_index]: label = &quot;O&quot; prefix = &quot;&quot; effect_index += 1 # need to transition &quot;inside&quot; if we just entered an entity if prefix == &quot;B-&quot;: prefix = &quot;I-&quot; if verbose: print(f&quot;{row} n&quot;) orig = tokenizer.convert_ids_to_tokens(tokens[&quot;input_ids&quot;]) for n in range(len(labels)): print(orig[n], labels[n]) tokens[&quot;labels&quot;] = labels return tokens . generate_row_labels(cons_dataset[&quot;train&quot;][2], verbose=True) . {&#39;text&#39;: &#39;Ampicillin-associated seizures.&#39;, &#39;drug&#39;: [&#39;Ampicillin&#39;], &#39;effect&#39;: [&#39;seizures&#39;], &#39;drug_indices_start&#39;: [0], &#39;drug_indices_end&#39;: [10], &#39;effect_indices_start&#39;: [22], &#39;effect_indices_end&#39;: [30]} [CLS] -100 am 1 ##pic 2 ##ill 2 ##in 2 - 0 associated 0 seizure 3 ##s 4 . 0 [SEP] -100 . {&#39;input_ids&#39;: [101, 1821, 20437, 7956, 1394, 118, 2628, 20752, 1116, 119, 102], &#39;token_type_ids&#39;: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], &#39;attention_mask&#39;: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], &#39;offset_mapping&#39;: [(0, 0), (0, 2), (2, 5), (5, 8), (8, 10), (10, 11), (11, 21), (22, 29), (29, 30), (30, 31), (0, 0)], &#39;labels&#39;: [-100, 1, 2, 2, 2, 0, 0, 3, 4, 0, -100]} . labeled_dataset = cons_dataset.map(generate_row_labels) . 100%|██████████| 3203/3203 [00:06&lt;00:00, 478.94ex/s] 100%|██████████| 1068/1068 [00:01&lt;00:00, 979.60ex/s] . labeled_dataset . DatasetDict({ train: Dataset({ features: [&#39;attention_mask&#39;, &#39;drug&#39;, &#39;drug_indices_end&#39;, &#39;drug_indices_start&#39;, &#39;effect&#39;, &#39;effect_indices_end&#39;, &#39;effect_indices_start&#39;, &#39;input_ids&#39;, &#39;labels&#39;, &#39;offset_mapping&#39;, &#39;text&#39;, &#39;token_type_ids&#39;], num_rows: 3203 }) test: Dataset({ features: [&#39;attention_mask&#39;, &#39;drug&#39;, &#39;drug_indices_end&#39;, &#39;drug_indices_start&#39;, &#39;effect&#39;, &#39;effect_indices_end&#39;, &#39;effect_indices_start&#39;, &#39;input_ids&#39;, &#39;labels&#39;, &#39;offset_mapping&#39;, &#39;text&#39;, &#39;token_type_ids&#39;], num_rows: 1068 }) }) . task = &quot;ner&quot; # Should be one of &quot;ner&quot;, &quot;pos&quot; or &quot;chunk&quot; batch_size = 16 . model = AutoModelForTokenClassification.from_pretrained(model_checkpoint, num_labels=len(label_list)) . Downloading: 100%|██████████| 634M/634M [00:57&lt;00:00, 11.6MB/s] Some weights of BertForTokenClassification were not initialized from the model checkpoint at SpanBERT/spanbert-large-cased and are newly initialized: [&#39;classifier.weight&#39;, &#39;classifier.bias&#39;] You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference. . model_name = model_checkpoint.split(&quot;/&quot;)[-1] args = TrainingArguments( f&quot;{model_name}-finetuned-{task}&quot;, evaluation_strategy = &quot;epoch&quot;, learning_rate=1e-5, per_device_train_batch_size=batch_size, per_device_eval_batch_size=batch_size, num_train_epochs=5, weight_decay=0.05, logging_steps=1 ) . data_collator = DataCollatorForTokenClassification(tokenizer) . def compute_metrics(p): predictions, labels = p predictions = np.argmax(predictions, axis=2) # Remove ignored index (special tokens) true_predictions = [ [label_list[p] for (p, l) in zip(prediction, label) if l != -100] for prediction, label in zip(predictions, labels) ] true_labels = [ [label_list[l] for (p, l) in zip(prediction, label) if l != -100] for prediction, label in zip(predictions, labels) ] results = metric.compute(predictions=true_predictions, references=true_labels) return { &quot;precision&quot;: results[&quot;overall_precision&quot;], &quot;recall&quot;: results[&quot;overall_recall&quot;], &quot;f1&quot;: results[&quot;overall_f1&quot;], &quot;accuracy&quot;: results[&quot;overall_accuracy&quot;], } . metric = load_metric(&quot;seqeval&quot;) . def compute_metrics(p): predictions, labels = p predictions = np.argmax(predictions, axis=2) # Remove ignored index (special tokens) true_predictions = [ [label_list[p] for (p, l) in zip(prediction, label) if l != -100] for prediction, label in zip(predictions, labels) ] true_labels = [ [label_list[l] for (p, l) in zip(prediction, label) if l != -100] for prediction, label in zip(predictions, labels) ] results = metric.compute(predictions=true_predictions, references=true_labels) return { &quot;precision&quot;: results[&quot;overall_precision&quot;], &quot;recall&quot;: results[&quot;overall_recall&quot;], &quot;f1&quot;: results[&quot;overall_f1&quot;], &quot;accuracy&quot;: results[&quot;overall_accuracy&quot;], } . trainer = Trainer( model, args, train_dataset=labeled_dataset[&quot;train&quot;], eval_dataset=labeled_dataset[&quot;test&quot;], data_collator=data_collator, tokenizer=tokenizer, compute_metrics=compute_metrics, ) . huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks... To disable this warning, you can either: - Avoid using `tokenizers` before the fork if possible - Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false) huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks... To disable this warning, you can either: - Avoid using `tokenizers` before the fork if possible - Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false) huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks... To disable this warning, you can either: - Avoid using `tokenizers` before the fork if possible - Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false) .",
            "url": "https://masapasa.github.io/nubri/jupyter/2021/12/07/hf_adr.html",
            "relUrl": "/jupyter/2021/12/07/hf_adr.html",
            "date": " • Dec 7, 2021"
        }
        
    
  
    
        ,"post4": {
            "title": "Language Model",
            "content": "# &quot;My Title&quot; &gt; &quot;Language Model&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . import transformers from datasets import load_dataset datasets = load_dataset(&quot;wikitext&quot;, &quot;wikitext-2-raw-v1&quot;) . Downloading: 8.33kB [00:00, 1.99MB/s] Downloading: 5.83kB [00:00, 1.79MB/s] . Downloading and preparing dataset wikitext/wikitext-2-raw-v1 (download: 4.50 MiB, generated: 12.91 MiB, post-processed: Unknown size, total: 17.41 MiB) to /home/aswin/.cache/huggingface/datasets/wikitext/wikitext-2-raw-v1/1.0.0/aa5e094000ec7afeb74c3be92c88313cd6f132d564c7effd961c10fd47c76f20... . Downloading: 100%|██████████| 4.72M/4.72M [00:01&lt;00:00, 4.49MB/s] 0 examples [00:00, ? examples/s]2021-11-24 13:20:29.789737: I tensorflow/stream_executor/platform/default/dso_loader.cc:53] Successfully opened dynamic library libcudart.so.11.0 . Dataset wikitext downloaded and prepared to /home/aswin/.cache/huggingface/datasets/wikitext/wikitext-2-raw-v1/1.0.0/aa5e094000ec7afeb74c3be92c88313cd6f132d564c7effd961c10fd47c76f20. Subsequent calls will reuse this data. . . datasets[&quot;train&quot;][10] . {&#39;text&#39;: &#39; The game &#39;s battle system , the BliTZ system , is carried over directly from Valkyira Chronicles . During missions , players select each unit using a top @-@ down perspective of the battlefield map : once a character is selected , the player moves the character around the battlefield in third @-@ person . A character can only act once per @-@ turn , but characters can be granted multiple turns at the expense of other characters &#39; turns . Each character has a field and distance of movement limited by their Action Gauge . Up to nine characters can be assigned to a single mission . During gameplay , characters will call out if something happens to them , such as their health points ( HP ) getting low or being knocked out by enemy attacks . Each character has specific &#34; Potentials &#34; , skills unique to each character . They are divided into &#34; Personal Potential &#34; , which are innate skills that remain unaltered unless otherwise dictated by the story and can either help or impede a character , and &#34; Battle Potentials &#34; , which are grown throughout the game and always grant boons to a character . To learn Battle Potentials , each character has a unique &#34; Masters Table &#34; , a grid @-@ based skill table that can be used to acquire and link different skills . Characters also have Special Abilities that grant them temporary boosts on the battlefield : Kurt can activate &#34; Direct Command &#34; and move around the battlefield without depleting his Action Point gauge , the character Reila can shift into her &#34; Valkyria Form &#34; and become invincible , while Imca can target multiple enemy units with her heavy weapon . n&#39;} . from datasets import ClassLabel import random import pandas as pd from IPython.display import display, HTML def show_random_elements(dataset, n=5): picks = [] for i in range(n): pick = random.randint(0, len(dataset) - 1) while pick in picks: pick = random.randint(0, len(dataset) - 1) picks.append(pick) df = pd.DataFrame(dataset[picks]) for column, typ in dataset.features.items(): if isinstance(typ, ClassLabel): df[column] = df[column].transform(lambda i: typ.names[i]) display(HTML(df.to_html())) show_random_elements(datasets[&quot;train&quot;]) . text . 0 NY 38A ( 21 @.@ 91 miles or 35 @.@ 26 kilometres ) runs from Moravia to NY 359 , near Mandana and NY 41A in southwestern Onondaga County , and then towards Auburn . It was assigned as part of the 1930 renumbering of state highways in New York . n | . 1 Since treatment options for relapsed AML are so limited , palliative care or enrolment in a clinical trial may be offered . n | . 2 &quot; Chapter 1 &quot; sets the tone for the environs of the series . According to David Carr the political environs have such &quot; marbleness &quot; that it belies the clandestine nature of political activities , including those of Underwood who says he is there to &quot; clear the pipes and keep the sludge moving &quot; . The fictional newspaper , The Washington Herald , is set with &quot; brutal &quot; lighting and drab furniture , in part because it was filmed at the real life Baltimore Sun offices . Carr uses several pejorative adjectives to describe Barnes &#39; apartment including sad , grubby , dirty , dreary and humble but note that this implies that the digital revolution is dominated by people &quot; on laptops who have no furniture &quot; . Similarly , Underwood and his associates are nattily clad , Barnes shows a lack of fashion recognition . n | . 3 = = Record = = n | . 4 It had a 13 @,@ 000 @-@ square @-@ foot ( 1 @,@ 200 m2 ) gallery for art , history , and science exhibits . It also had a 280 @-@ seat indoor theater , a 500 @-@ seat outdoor theater , classrooms , an 80 @-@ seat demonstration kitchen , a rare book library , a wine @-@ tasting area , a café ( named American Market Cafe ) , gift shop ( named Cornucopia ) , and 3 @.@ 5 acres ( 1 @.@ 4 ha ) of landscaped edible gardens . The building &#39;s architect was Polshek Partnership Architects . Julia &#39;s Kitchen was a restaurant inside the Copia building that focused on seasonal dishes and was named for honorary trustee Julia Child , who loaned part of her kitchen to the restaurant , a wall of 49 pans , pots , fish molds , and other tools and objects . Within a year of the center &#39;s closing , the items were sent to the Smithsonian Institution &#39;s National Museum of American History , where they are included in the Julia Child &#39;s kitchen exhibit , which up until that point was only missing that portion . The restaurant had a 1 @,@ 700 @-@ square @-@ foot ( 160 m2 ) dining room ( for 180 seats ) , an outdoor seating area ( 4 @,@ 300 square feet ( 400 m2 ) ) and a 2 @,@ 500 @-@ square @-@ foot ( 230 m2 ) kitchen . The gardens had fruit orchards , a pavilion with a kitchen and large dining table , and a small vineyard with 60 vines and 30 different grape varieties . The restaurant and café were both operated by local caterer Seasoned Elements , and later Patina Restaurant Group . n | . model_checkpoint = &quot;gpt2&quot; tokenizer_checkpoint = &quot;sgugger/gpt2-like-tokenizer&quot; . from transformers import AutoTokenizer tokenizer = AutoTokenizer.from_pretrained(tokenizer_checkpoint) . Downloading: 100%|██████████| 236/236 [00:00&lt;00:00, 43.5kB/s] Downloading: 100%|██████████| 387k/387k [00:00&lt;00:00, 735kB/s] Downloading: 100%|██████████| 226k/226k [00:00&lt;00:00, 635kB/s] Downloading: 100%|██████████| 663k/663k [00:00&lt;00:00, 1.21MB/s] Downloading: 100%|██████████| 90.0/90.0 [00:00&lt;00:00, 57.8kB/s] . def tokenize_function(examples): return tokenizer(examples[&quot;text&quot;]) . tokenized_dataset = datasets.map(tokenize_function, batched=True, num_proc=4, remove_columns=[&quot;text&quot;]) . #0: 0%| | 0/2 [00:00&lt;?, ?ba/s] #3: 100%|██████████| 2/2 [00:00&lt;00:00, 2.97ba/s] #0: 100%|██████████| 2/2 [00:00&lt;00:00, 2.52ba/s] #1: 100%|██████████| 2/2 [00:00&lt;00:00, 2.53ba/s] #2: 100%|██████████| 2/2 [00:01&lt;00:00, 1.92ba/s] #0: 0%| | 0/10 [00:00&lt;?, ?ba/s] #0: 10%|█ | 1/10 [00:00&lt;00:06, 1.32ba/s] #0: 20%|██ | 2/10 [00:01&lt;00:05, 1.34ba/s] #0: 30%|███ | 3/10 [00:02&lt;00:05, 1.34ba/s] #0: 40%|████ | 4/10 [00:02&lt;00:04, 1.33ba/s] #0: 50%|█████ | 5/10 [00:03&lt;00:03, 1.41ba/s] #0: 60%|██████ | 6/10 [00:04&lt;00:02, 1.52ba/s] #0: 70%|███████ | 7/10 [00:04&lt;00:01, 1.77ba/s] #0: 80%|████████ | 8/10 [00:04&lt;00:00, 2.00ba/s] #2: 100%|██████████| 10/10 [00:04&lt;00:00, 2.04ba/s] #0: 90%|█████████ | 9/10 [00:05&lt;00:00, 2.18ba/s] #0: 100%|██████████| 10/10 [00:05&lt;00:00, 1.89ba/s] #3: 100%|██████████| 10/10 [00:05&lt;00:00, 1.98ba/s] #1: 100%|██████████| 10/10 [00:05&lt;00:00, 1.87ba/s] #0: 0%| | 0/1 [00:00&lt;?, ?ba/s] #0: 100%|██████████| 1/1 [00:00&lt;00:00, 2.18ba/s] #3: 100%|██████████| 1/1 [00:00&lt;00:00, 1.71ba/s] #1: 100%|██████████| 1/1 [00:00&lt;00:00, 1.36ba/s] #2: 100%|██████████| 1/1 [00:00&lt;00:00, 1.37ba/s] . tokenized_dataset[&quot;train&quot;][1] . {&#39;attention_mask&#39;: [1, 1, 1, 1, 1, 1], &#39;input_ids&#39;: [238, 8576, 9441, 2987, 238, 252]} . block_size = 128 def group_texts(examples): concatenated_examples = {k: sum(examples[k], []) for k in examples.keys()} total_length = len(concatenated_examples[list(examples.keys())[0]]) total_length = (total_length // block_size) * block_size result= {k: [t[i: i + block_size] for i in range(0, total_length, block_size)] for k, t in concatenated_examples.items()} result[&quot;labels&quot;] = result[&quot;input_ids&quot;].copy() return result . lm_datasets = tokenized_dataset.map(group_texts, batched=True, batch_size=1000, num_proc=4) . #0: 0%| | 0/2 [00:00&lt;?, ?ba/s] #1: 100%|██████████| 2/2 [00:01&lt;00:00, 1.55ba/s] #0: 100%|██████████| 2/2 [00:01&lt;00:00, 1.33ba/s] #3: 100%|██████████| 2/2 [00:01&lt;00:00, 1.31ba/s] #2: 100%|██████████| 2/2 [00:01&lt;00:00, 1.16ba/s] #0: 0%| | 0/10 [00:00&lt;?, ?ba/s] #0: 10%|█ | 1/10 [00:00&lt;00:08, 1.11ba/s] #0: 20%|██ | 2/10 [00:01&lt;00:07, 1.05ba/s] #0: 30%|███ | 3/10 [00:02&lt;00:06, 1.06ba/s] #0: 40%|████ | 4/10 [00:03&lt;00:05, 1.06ba/s] #0: 50%|█████ | 5/10 [00:04&lt;00:04, 1.10ba/s] #0: 60%|██████ | 6/10 [00:05&lt;00:03, 1.14ba/s] #0: 70%|███████ | 7/10 [00:06&lt;00:03, 1.01s/ba] #0: 80%|████████ | 8/10 [00:07&lt;00:02, 1.00s/ba] #2: 100%|██████████| 10/10 [00:08&lt;00:00, 1.23ba/s] #1: 100%|██████████| 10/10 [00:08&lt;00:00, 1.16ba/s] #0: 100%|██████████| 10/10 [00:08&lt;00:00, 1.14ba/s] #3: 100%|██████████| 10/10 [00:08&lt;00:00, 1.12ba/s] #0: 0%| | 0/1 [00:00&lt;?, ?ba/s] #0: 100%|██████████| 1/1 [00:00&lt;00:00, 1.96ba/s] #2: 100%|██████████| 1/1 [00:00&lt;00:00, 1.43ba/s] #1: 100%|██████████| 1/1 [00:00&lt;00:00, 1.34ba/s] #3: 100%|██████████| 1/1 [00:00&lt;00:00, 1.31ba/s] . tokenizer.decode(lm_datasets[&quot;train&quot;][1][&quot;input_ids&quot;]) . &#39; the &#34; Nameless &#34;, a penal military unit serving the nation of Gallia during the Second Europan War who perform secret black operations and are pitted against the Imperial unit &#34; Calamaty Raven &#34;. n The game began development in 2010, carrying over a large portion of the work done on Valkyria Chronicles II. While it retained the standard features of the series, it also underwent multiple adjustments, such as making the game more forgiving for series newcomers. Character designer Raita Honjou and composer Hitoshi Sakimoto both returned from previous entries, along with Valkyria Chronicles II director Takeshi Ozawa. A large&#39; .",
            "url": "https://masapasa.github.io/nubri/jupyter/2021/11/24/lang_model.html",
            "relUrl": "/jupyter/2021/11/24/lang_model.html",
            "date": " • Nov 24, 2021"
        }
        
    
  
    
        ,"post5": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://masapasa.github.io/nubri/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post6": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://masapasa.github.io/nubri/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://masapasa.github.io/nubri/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://masapasa.github.io/nubri/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}